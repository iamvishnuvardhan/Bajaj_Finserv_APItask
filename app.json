const express = require("express");
const app = express();

// To handle large JSON input
app.use(express.json({ limit: '50mb' }));

// POST and GET request handlers for the /bfhl route
app
  .route("/bfhl")
  .get((req, res) => {
    res.status(200).json({ operation_code: 1 });
  })
  .post((req, res) => {
    const { data, file_b64 } = req.body || {};
    const numbers = [];
    const alphabets = [];
    let highest_lowercase_alphabet = "";

    // Separate numbers and alphabets from the 'data' array
    for (const item of data) {
      if (!isNaN(item)) {
        numbers.push(item); // Numbers
      } else if (item.length === 1 && isNaN(item)) {
        alphabets.push(item); // Alphabets
        // Find the highest lowercase alphabet
        if (item === item.toLowerCase() && item > highest_lowercase_alphabet) {
          highest_lowercase_alphabet = item;
        }
      }
    }

    // File validation via Base64 (mock example)
    let file_valid = false;
    let file_mime_type = "";
    let file_size_kb = 0;

    if (file_b64) {
      try {
        const fileBuffer = Buffer.from(file_b64, 'base64');
        file_size_kb = (fileBuffer.length / 1024).toFixed(2); // File size in KB
        file_mime_type = "application/octet-stream"; // Mock MIME type, you can add better MIME detection logic here
        file_valid = true; // File is valid if it's base64 encoded
      } catch (error) {
        file_valid = false;
      }
    }

    // Return JSON response
    res.json({
      is_success: true,
      user_id: "sanhita_kundu_17091999", // Format: full_name_ddmmyyyy
      email: "sanhita.kundu2020@vitstudent.ac.in",
      roll_number: "20BEC0215",
      numbers,
      alphabets,
      highest_lowercase_alphabet: highest_lowercase_alphabet ? [highest_lowercase_alphabet] : [],
      file_valid,
      file_mime_type,
      file_size_kb,
    });
  });

// Listen on port 3000 or the environment port
const port = process.env.PORT || 3000;
app.listen(port, () => {
  console.log(`Server running on http://localhost:${port}`);
});
